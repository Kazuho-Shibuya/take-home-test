require 'rails_helper'

# This spec was generated by rspec-rails when you ran the scaffold generator.
# It demonstrates how one might use RSpec to test the controller code that
# was generated by Rails when you ran the scaffold generator.
#
# It assumes that the implementation code is generated by the rails scaffold
# generator. If you are using any extension libraries to generate different
# controller code, this generated spec may or may not pass.
#
# It only uses APIs available in rails and/or rspec-rails. There are a number
# of tools you can use to make these specs even more expressive, but we're
# sticking to rails and rspec-rails APIs to keep things simple and stable.

RSpec.describe "/income_expenditure_statements", type: :request do

  # This should return the minimal set of attributes required to create a valid
  # IncomeExpenditureStatement. As you add validations to IncomeExpenditureStatement, be sure to
  # adjust the attributes here as well.
  user = FactoryBot.create(:user)
  income = FactoryBot.create(:income)
  expenditure = FactoryBot.create(:expenditure)

  let(:valid_attributes) {
    {
      disposable_income: 5000,
      rating: "A",
      user_id: user.id,
      incomes_attributes: {
        "0": { user_id: user.id, name: "Salary", amount: 1000 },
        "1": { user_id: user.id, name: "Other", amount: 2000 }
      },
      expenditures_attributes: {
        "0": { user_id: user.id, name: "Travel", amount: 100 },
        "1": { user_id: user.id, name: "Food", amount: 300 }
      }
    }
  }

  let(:invalid_attributes) {
    {
      disposable_income: nil,
      rating: nil,
      user_id: nil,
      incomes_attributes: {
        "0": { user_id: nil, name: nil, amount: nil },
        "1": { user_id: nil, name: nil, amount: nil }
      },
      expenditures_attributes: {
        "0": { user_id: nil, name: nil, amount: nil },
        "1": { user_id: nil, name: nil, amount: nil }
      }
    }
  }

  describe "GET /index" do
    it "renders a successful response" do
      IncomeExpenditureStatement.create! valid_attributes
      get income_expenditure_statements_url
      expect(response).to be_successful
    end
  end

  describe "GET /show" do
    it "renders a successful response" do
      income_expenditure_statement = IncomeExpenditureStatement.create! valid_attributes
      get income_expenditure_statement_url(income_expenditure_statement)
      expect(response).to be_successful
    end
  end

  describe "GET /new" do
    it "renders a successful response" do
      get new_income_expenditure_statement_url
      expect(response).to be_successful
    end
  end

  describe "GET /edit" do
    it "renders a successful response" do
      income_expenditure_statement = IncomeExpenditureStatement.create! valid_attributes
      get edit_income_expenditure_statement_url(income_expenditure_statement)
      expect(response).to be_successful
    end
  end

  describe "POST /create" do
    context "with valid parameters" do
      it "creates a new IncomeExpenditureStatement" do
        expect {
          post income_expenditure_statements_url, params: { income_expenditure_statement: valid_attributes }
        }.to change(IncomeExpenditureStatement, :count).by(1)
      end

      it "redirects to the created income_expenditure_statement" do
        post income_expenditure_statements_url, params: { income_expenditure_statement: valid_attributes }
        expect(response).to redirect_to(income_expenditure_statement_url(IncomeExpenditureStatement.last))
      end
    end

    context "with invalid parameters" do
      it "does not create a new IncomeExpenditureStatement" do
        expect {
          post income_expenditure_statements_url, params: { income_expenditure_statement: invalid_attributes }
        }.to change(IncomeExpenditureStatement, :count).by(0)
      end


      it "renders a response with 422 status (i.e. to display the 'new' template)" do
        post income_expenditure_statements_url, params: { income_expenditure_statement: invalid_attributes }
        expect(response).to have_http_status(:unprocessable_entity)
      end

    end
  end

  describe "PATCH /update" do
    context "with valid parameters" do
      let(:new_attributes) {
        {
          # disposable_income: 50000,
          # rating: "B",
          user_id: user.id,
          incomes_attributes: {
            "0": { user_id: user.id, name: "Invest", amount: 1000 },
            "1": { user_id: user.id, name: "Other", amount: 2000 }
          },
          expenditures_attributes: {
            "0": { user_id: user.id, name: "Travel", amount: 100 },
            "1": { user_id: user.id, name: "Food", amount: 300 }
          }
        }
      }

      it "updates the requested income_expenditure_statement" do
        income_expenditure_statement = IncomeExpenditureStatement.create! valid_attributes
        patch income_expenditure_statement_url(income_expenditure_statement), params: { income_expenditure_statement: new_attributes }
        income_expenditure_statement.reload
        expect(income_expenditure_statement.disposable_income).to eq 2600
        expect(income_expenditure_statement.rating).to eq "B"
      end

      it "redirects to the income_expenditure_statement" do
        income_expenditure_statement = IncomeExpenditureStatement.create! valid_attributes
        patch income_expenditure_statement_url(income_expenditure_statement), params: { income_expenditure_statement: new_attributes }
        income_expenditure_statement.reload
        expect(response).to redirect_to(income_expenditure_statement_url(income_expenditure_statement))
      end
    end

    context "with invalid parameters" do

      it "renders a response with 422 status (i.e. to display the 'edit' template)" do
        income_expenditure_statement = IncomeExpenditureStatement.create! valid_attributes
        patch income_expenditure_statement_url(income_expenditure_statement), params: { income_expenditure_statement: invalid_attributes }
        expect(response).to have_http_status(:unprocessable_entity)
      end

    end
  end

  describe "DELETE /destroy" do
    it "destroys the requested income_expenditure_statement" do
      income_expenditure_statement = IncomeExpenditureStatement.create! valid_attributes
      expect {
        delete income_expenditure_statement_url(income_expenditure_statement)
      }.to change(IncomeExpenditureStatement, :count).by(-1)
    end

    it "redirects to the income_expenditure_statements list" do
      income_expenditure_statement = IncomeExpenditureStatement.create! valid_attributes
      delete income_expenditure_statement_url(income_expenditure_statement)
      expect(response).to redirect_to(income_expenditure_statements_url)
    end
  end
end
